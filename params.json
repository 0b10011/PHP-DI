{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"PHP Dependency Injection","body":"## Dependency Injection\r\n\r\nThe aim of this library is to make [Dependency Injection]\r\n(http://en.wikipedia.org/wiki/Dependency_injection)\r\nas simple as possible with PHP.\r\n\r\nUnlike Zend\\DI, Symfony Service Container or Pimple, PHP-DI:\r\n\r\n* can be used by a monkey\r\n* is not limited to Services (_anything_ can be injected)\r\n* uses annotations for code-readability and ease of use\r\n\r\n### Dependency injection\r\n\r\nAn example is worth a thousand words:\r\n\r\n```\r\nuse DI\\Annotations\\Inject;\r\n\r\nclass ProductService {\r\n    /**\r\n     * @Inject\r\n     * @var PriceService\r\n     */\r\n    private $priceService;\r\n\r\n    public function doSomething($productId) {\r\n        $price = $priceService->getPrice($productId);\r\n    }\r\n}\r\n```\r\n\r\n### Value injection\r\n\r\nPHP-DI also supports `@Value` annotations to inject values:\r\n\r\n```\r\nuse DI\\Annotations\\Value;\r\n\r\nclass MyClass {\r\n    /**\r\n     * @Value(\"db.host\")\r\n     */\r\n    private $dbHost;\r\n\r\n}\r\n```\r\n\r\nYou can use a `.ini` file to configure the value to inject:\r\n\r\n```\r\ndi.values[\"db.host\"] = \"localhost\"\r\n```\r\n\r\n### Installation\r\n\r\nRead the [Getting started](https://github.com/mnapoli/PHP-DI/wiki/Getting-started) guide.\r\n\r\nPHP-DI can be used with [**Composer**](http://getcomposer.org/doc/00-intro.md) for a very quick and easy installation.\r\n\r\nIt also follows [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md), so it is compatible with standard autoloaders. There is even an official **Zend Framework** project layout with PHP-DI already configured and ready to go: [zf-quickstart-di](https://github.com/mnapoli/zf-quickstart-di).\r\n\r\n### Documentation\r\n\r\nYou can read more in the [Wiki](https://github.com/mnapoli/PHP-DI/wiki).","name":"PHP-DI","google":"UA-15584647-13"}